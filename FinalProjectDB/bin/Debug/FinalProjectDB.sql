/*
Deployment script for FinalProjectDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "FinalProjectDB"
:setvar DefaultFilePrefix "FinalProjectDB"
:setvar DefaultDataPath "C:\Users\Admin\AppData\Local\Microsoft\VisualStudio\SSDT\FinalProjectDB"
:setvar DefaultLogPath "C:\Users\Admin\AppData\Local\Microsoft\VisualStudio\SSDT\FinalProjectDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Addresses]...';


GO
CREATE TABLE [dbo].[Addresses] (
    [AddressId]    INT            NOT NULL,
    [StreetName]   NVARCHAR (100) NOT NULL,
    [StreetNumber] NVARCHAR (20)  NOT NULL,
    [City]         NVARCHAR (50)  NOT NULL,
    [PostalCode]   NVARCHAR (10)  NOT NULL,
    [Country]      NVARCHAR (50)  NULL,
    [Province]     NVARCHAR (50)  NULL,
    PRIMARY KEY CLUSTERED ([AddressId] ASC)
);


GO
PRINT N'Creating Table [dbo].[AppartmentImages]...';


GO
CREATE TABLE [dbo].[AppartmentImages] (
    [ImageId]     INT            NOT NULL,
    [ApartmentId] INT            NOT NULL,
    [ImageURL]    NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([ImageId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Appartments]...';


GO
CREATE TABLE [dbo].[Appartments] (
    [AppartmentId]      INT             NOT NULL,
    [PropertyManagerId] INT             NULL,
    [AddressId]         INT             NOT NULL,
    [StatusId]          INT             NULL,
    [BuildingId]        INT             NULL,
    [NumberOfRooms]     INT             NOT NULL,
    [Amenities]         NVARCHAR (MAX)  NULL,
    [Price]             DECIMAL (10, 2) NOT NULL,
    [Floor]             INT             NULL,
    [ConstructionYear]  INT             NULL,
    [Area]              FLOAT (53)      NULL,
    PRIMARY KEY CLUSTERED ([AppartmentId] ASC)
);


GO
PRINT N'Creating Table [dbo].[AppartmentStatuses]...';


GO
CREATE TABLE [dbo].[AppartmentStatuses] (
    [StatusId]   INT           NOT NULL,
    [StatusName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Appointments]...';


GO
CREATE TABLE [dbo].[Appointments] (
    [AppointmentId]     INT      NOT NULL,
    [PropertyManagerId] INT      NOT NULL,
    [TenantId]          INT      NOT NULL,
    [Timestamp]         DATETIME NOT NULL,
    [AddressId]         INT      NULL,
    PRIMARY KEY CLUSTERED ([AppointmentId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Buildings]...';


GO
CREATE TABLE [dbo].[Buildings] (
    [BuildingId]       INT            NOT NULL,
    [AddressId]        INT            NOT NULL,
    [NumberOfFloors]   INT            NULL,
    [ConstructionYear] INT            NULL,
    [Amenities]        NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([BuildingId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Events]...';


GO
CREATE TABLE [dbo].[Events] (
    [EventId]           INT            NOT NULL,
    [PropertyManagerId] INT            NOT NULL,
    [PropertyOwnerId]   INT            NOT NULL,
    [EventDescription]  NVARCHAR (MAX) NOT NULL,
    [ApartmentId]       INT            NULL,
    [Timestamp]         DATETIME       NULL,
    [EventTypeId]       INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([EventId] ASC)
);


GO
PRINT N'Creating Table [dbo].[EventTypes]...';


GO
CREATE TABLE [dbo].[EventTypes] (
    [EventTypeId]   INT           NOT NULL,
    [EventTypeName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([EventTypeId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Logins]...';


GO
CREATE TABLE [dbo].[Logins] (
    [LoginId]  INT            NOT NULL,
    [UserId]   INT            NULL,
    [Email]    NVARCHAR (100) NULL,
    [Password] NVARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([LoginId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Messages]...';


GO
CREATE TABLE [dbo].[Messages] (
    [MessageId]       INT            NOT NULL,
    [SenderId]        INT            NOT NULL,
    [ReceiverId]      INT            NOT NULL,
    [Subject]         NVARCHAR (100) NOT NULL,
    [MessageBody]     NVARCHAR (MAX) NOT NULL,
    [Timestamp]       DATETIME       NOT NULL,
    [MessageStatusId] INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([MessageId] ASC)
);


GO
PRINT N'Creating Table [dbo].[MessageStatuses]...';


GO
CREATE TABLE [dbo].[MessageStatuses] (
    [MessageStatusId] INT           NOT NULL,
    [StatusName]      NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([MessageStatusId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleId]   INT           NOT NULL,
    [RoleName] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([RoleId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserId]    INT           NOT NULL,
    [FirstName] NVARCHAR (50) NOT NULL,
    [LastName]  NVARCHAR (50) NOT NULL,
    [RoleId]    INT           NOT NULL,
    [Phone]     NVARCHAR (20) NULL,
    [AddressId] INT           NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[AppartmentImages]...';


GO
ALTER TABLE [dbo].[AppartmentImages] WITH NOCHECK
    ADD FOREIGN KEY ([ApartmentId]) REFERENCES [dbo].[Appartments] ([AppartmentId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appartments]...';


GO
ALTER TABLE [dbo].[Appartments] WITH NOCHECK
    ADD FOREIGN KEY ([PropertyManagerId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appartments]...';


GO
ALTER TABLE [dbo].[Appartments] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Addresses] ([AddressId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appartments]...';


GO
ALTER TABLE [dbo].[Appartments] WITH NOCHECK
    ADD FOREIGN KEY ([StatusId]) REFERENCES [dbo].[AppartmentStatuses] ([StatusId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appartments]...';


GO
ALTER TABLE [dbo].[Appartments] WITH NOCHECK
    ADD FOREIGN KEY ([BuildingId]) REFERENCES [dbo].[Buildings] ([BuildingId]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appointments]...';


GO
ALTER TABLE [dbo].[Appointments] WITH NOCHECK
    ADD FOREIGN KEY ([PropertyManagerId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appointments]...';


GO
ALTER TABLE [dbo].[Appointments] WITH NOCHECK
    ADD FOREIGN KEY ([TenantId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Appointments]...';


GO
ALTER TABLE [dbo].[Appointments] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Addresses] ([AddressId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Buildings]...';


GO
ALTER TABLE [dbo].[Buildings] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Addresses] ([AddressId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Events]...';


GO
ALTER TABLE [dbo].[Events] WITH NOCHECK
    ADD FOREIGN KEY ([EventTypeId]) REFERENCES [dbo].[EventTypes] ([EventTypeId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Logins]...';


GO
ALTER TABLE [dbo].[Logins] WITH NOCHECK
    ADD FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Messages]...';


GO
ALTER TABLE [dbo].[Messages] WITH NOCHECK
    ADD FOREIGN KEY ([SenderId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Messages]...';


GO
ALTER TABLE [dbo].[Messages] WITH NOCHECK
    ADD FOREIGN KEY ([ReceiverId]) REFERENCES [dbo].[Users] ([UserId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Messages]...';


GO
ALTER TABLE [dbo].[Messages] WITH NOCHECK
    ADD FOREIGN KEY ([MessageStatusId]) REFERENCES [dbo].[MessageStatuses] ([MessageStatusId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([RoleId]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users] WITH NOCHECK
    ADD FOREIGN KEY ([AddressId]) REFERENCES [dbo].[Addresses] ([AddressId]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;

DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.AppartmentImages'), OBJECT_ID(N'dbo.Appartments'), OBJECT_ID(N'dbo.Appointments'), OBJECT_ID(N'dbo.Buildings'), OBJECT_ID(N'dbo.Events'), OBJECT_ID(N'dbo.Logins'), OBJECT_ID(N'dbo.Messages'), OBJECT_ID(N'dbo.Users'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0
                                              AND [is_disabled] = 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint: ' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occurred while verifying constraints', 16, 127);
    END

SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.';


GO
